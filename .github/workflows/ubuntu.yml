name: Ubuntu

on:
  workflow_call:
    inputs:
      artifact_id:
        description: 'Unique identifier for artifacts'
        required: true
        type: string
        
permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  ci_test_gcc:
    runs-on: ubuntu-latest
    container: gcc:14
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Get latest CMake and ninja
        uses: lukka/get-cmake@28983e0d3955dba2bb0a6810caae0c6cf268ec0c # v4.0.0
      - name: Run CMake
        run: cmake -S . -B build -DJSON_CI=On
      - name: Build
        run: cmake --build build --target ci_test_gcc
      - name: Upload test report 
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ci_test_gcc_artefact
          path: build/my_logs/

  ci_infer:
    runs-on: ubuntu-latest
    container: ghcr.io/nlohmann/json-ci:v2.4.0
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Run CMake
        run: cmake -S . -B build -DJSON_CI=On
      - name: Build
        run: cmake --build build --target ci_infer

  ci_static_analysis_ubuntu:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [ci_test_amalgamation, ci_test_single_header, ci_cppcheck, ci_cpplint, ci_reproducible_tests, ci_non_git_tests, ci_offline_testdata, ci_reuse_compliance, ci_test_valgrind]
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@c6295a65d1254861815972266d5933fd6e532bdf # v2.11.1
        with:
          egress-policy: audit

      - name: Install Valgrind
        run: sudo apt-get update ; sudo apt-get install -y valgrind
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Get latest CMake and ninja
        uses: lukka/get-cmake@28983e0d3955dba2bb0a6810caae0c6cf268ec0c # v4.0.0
      - name: Run CMake
        run: cmake -S . -B build -DJSON_CI=On
      - name: Build
        run: cmake --build build --target ${{ matrix.target }}
      - name: Upload test report 
        if: ${{ matrix.target != 'ci_reuse_compliance' && matrix.target != 'ci_cpplint' && matrix.target != 'ci_test_amalgamation' && matrix.target != 'ci_cppcheck' }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ci_static_analysis_ubuntu_artefact_${{ matrix.target }}
          path: build/my_logs/

  ci_static_analysis_clang:
    runs-on: ubuntu-latest
    container: silkeh/clang:20
    strategy:
      matrix:
        target: [ci_test_clang, ci_clang_tidy, ci_test_clang_sanitizer, ci_clang_analyze, ci_single_binaries]
    steps:
      - name: Install git, clang-tools, iwyu (ci_single_binaries), and unzip
        run: apt-get update ; apt-get install -y git clang-tools iwyu unzip
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Get latest CMake and ninja
        uses: lukka/get-cmake@28983e0d3955dba2bb0a6810caae0c6cf268ec0c # v4.0.0
      - name: Run CMake
      # The default C++ compiler in the docker image is clang++-14 which does not support all compiler flags
        run: cmake -S . -B build -DJSON_CI=On -DCLANG_TOOL=clang++-20
      - name: Build
        run: cmake --build build --target ${{ matrix.target }}
      - name: Upload test report 
        if: ${{ matrix.target != 'ci_clang_analyze' && matrix.target != 'ci_single_binaries' && matrix.target != 'ci_clang_tidy' }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ci_static_analysis_clang_artefact_${{ matrix.target }}
          path: build/my_logs/

  ci_cmake_options:
    runs-on: ubuntu-latest
    container: ubuntu:focal
    strategy:
      matrix:
        target: [ci_cmake_flags, ci_test_diagnostics, ci_test_diagnostic_positions, ci_test_noexceptions, ci_test_noimplicitconversions, ci_test_legacycomparison, ci_test_noglobaludls]
    steps:
      - name: Install build-essential
        run: apt-get update ; apt-get install -y build-essential unzip wget git libssl-dev
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Get latest CMake and ninja
        uses: lukka/get-cmake@28983e0d3955dba2bb0a6810caae0c6cf268ec0c # v4.0.0
      - name: Run CMake
        run: cmake -S . -B build -DJSON_CI=On
      - name: Build
        run: cmake --build build --target ${{ matrix.target }}
      - name: Upload test report 
        if: ${{ matrix.target != 'ci_cmake_flags' }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ci_cmake_options_artefact_${{ matrix.target }}
          path: build/my_logs/

  ci_test_coverage:
    runs-on: ubuntu-latest
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@c6295a65d1254861815972266d5933fd6e532bdf # v2.11.1
        with:
          egress-policy: audit

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Install dependencies and de_DE locale
        run: |
          sudo apt-get clean
          sudo apt-get update
          sudo apt-get install -y build-essential cmake lcov ninja-build make locales gcc-multilib g++-multilib
          sudo locale-gen de_DE
          sudo update-locale
      - name: Run CMake
        run: cmake -S . -B build -DJSON_CI=On
      - name: Build
        run: cmake --build build --target ci_test_coverage
      - name: Archive coverage report
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: code-coverage-report
          path: ${{ github.workspace }}/build/html
      - name: Publish report to Coveralls
        uses: coverallsapp/github-action@648a8eb78e6d50909eff900e4ec85cab4524a45b # v2.3.6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ${{ github.workspace }}/build/json.info.filtered.noexcept
          fail-on-error: false # Do not fail the workflow if Coveralls fails
      - name: Upload test report 
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ci_test_coverage_artefact
          path: build/my_logs/

  ci_test_compilers_gcc_old:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler: ['4.8', '4.9', '5', '6']
    container: ghcr.io/nlohmann/json-ci:v2.4.0
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Run CMake
        run: CXX=g++-${{ matrix.compiler }} cmake -S . -B build -DJSON_CI=On
      - name: Build
        run: cmake --build build --target ci_test_compiler_g++-${{ matrix.compiler }}
      - name: Upload test report 
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ci_test_compilers_gcc_old_artefact_${{ matrix.compiler }}
          path: build/my_logs/

  ci_test_compilers_gcc:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # older GCC docker images (4, 5, 6) fail to check out code
        compiler: ['7', '8', '9', '10', '11', '12', '13', '14']
    container: gcc:${{ matrix.compiler }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Get latest CMake and ninja
        uses: lukka/get-cmake@28983e0d3955dba2bb0a6810caae0c6cf268ec0c # v4.0.0
      - name: Run CMake
        run: cmake -S . -B build -DJSON_CI=On
      - name: Build
        run: cmake --build build --target ci_test_compiler_default
      - name: Upload test report 
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ci_test_compilers_gcc_clang_artefact_${{ matrix.compiler }}
          path: build/my_logs/

  ci_test_compilers_clang:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler: ['17', '18', '19', '20']
    container: silkeh/clang:${{ matrix.compiler }}
    steps:
      - name: Install unzip and git
        run: apt-get update ; apt-get install -y unzip git
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Get latest CMake and ninja
        uses: lukka/get-cmake@28983e0d3955dba2bb0a6810caae0c6cf268ec0c # v4.0.0
      - name: Set env FORCE_STDCPPFS_FLAG for clang 7 / 8 / 9 / 10
        run: echo "JSON_FORCED_GLOBAL_COMPILE_OPTIONS=-DJSON_HAS_FILESYSTEM=0;-DJSON_HAS_EXPERIMENTAL_FILESYSTEM=0" >> "$GITHUB_ENV"
        if: ${{ matrix.compiler == '7' || matrix.compiler == '8' || matrix.compiler == '9' || matrix.compiler == '10' }}
      - name: Run CMake
        run: cmake -S . -B build -DJSON_CI=On
      - name: Build
        run: cmake --build build --target ci_test_compiler_default
      - name: Upload test report 
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ci_test_compilers_clang_artefact_${{ matrix.compiler }}
          path: build/my_logs/

  ci_test_standards_gcc:
    runs-on: ubuntu-latest
    container: gcc:14.3
    strategy:
      matrix:
        standard: [11, 14, 17, 20, 23, 26]
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Get latest CMake and ninja
        uses: lukka/get-cmake@28983e0d3955dba2bb0a6810caae0c6cf268ec0c # v4.0.0
      - name: Run CMake
        run: cmake -S . -B build -DJSON_CI=On
      - name: Build
        run: cmake --build build --target ci_test_gcc_cxx${{ matrix.standard }}
      - name: Upload test report 
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ci_test_standards_gcc_artefact_${{ matrix.standard }}
          path: build/my_logs/

  ci_test_standards_clang:
    runs-on: ubuntu-latest
    container: silkeh/clang:20
    strategy:
      matrix:
        standard: [11, 14, 17, 20, 23, 26]
        stdlib: [libcxx, libstdcxx]
    steps:
      - name: Install git and unzip
        run: apt-get update ; apt-get install -y git unzip
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Get latest CMake and ninja
        uses: lukka/get-cmake@28983e0d3955dba2bb0a6810caae0c6cf268ec0c # v4.0.0
      - name: Run CMake
        run: cmake -S . -B build -DJSON_CI=On
      - name: Build with libc++
        run: cmake --build build --target ci_test_clang_libcxx_cxx${{ matrix.standard }}
        if: ${{ matrix.stdlib == 'libcxx' }}
      - name: Build with libstdc++
        run: cmake --build build --target ci_test_clang_cxx${{ matrix.standard }}
        if: ${{ matrix.stdlib == 'libstdcxx' }}
      - name: Upload test report 
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ci_test_standards_clang_artefact_${{ matrix.stdlib }}_${{ matrix.standard }}
          path: build/my_logs/

  ci_cuda_example:
    runs-on: ubuntu-latest
    container: ghcr.io/nlohmann/json-ci:v2.4.0
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Run CMake
        run: cmake -S . -B build -DJSON_CI=On
      - name: Build
        run: cmake --build build --target ci_cuda_example

  ci_icpc:
    runs-on: ubuntu-latest
    container: ghcr.io/nlohmann/json-ci:v2.2.0
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Run CMake
        run: cmake -S . -B build -DJSON_CI=On
      - name: Build
        run: |
          . /opt/intel/oneapi/setvars.sh
          cmake --build build --target ci_icpc
      - name: Upload test report 
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ci_icpc_artefact
          path: build/my_logs/

  ci_test_documentation:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [ci_test_examples, ci_test_build_documentation]
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@c6295a65d1254861815972266d5933fd6e532bdf # v2.11.1
        with:
          egress-policy: audit

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Run CMake
        run: cmake -S . -B build -DJSON_CI=On
      - name: Build
        run: cmake --build build --target ${{ matrix.target }}

  publish_test_data_success:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: [ci_test_gcc, ci_infer, ci_static_analysis_ubuntu, ci_static_analysis_clang, ci_cmake_options, ci_test_coverage, ci_test_compilers_gcc_old, ci_test_compilers_gcc, ci_test_compilers_clang, ci_test_standards_gcc, ci_test_standards_clang, ci_cuda_example, ci_icpc, ci_test_documentation]
    if: success()
    steps:
      - name: Check out code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Download all workflow artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          path: my_artifacts

      - name: Get current branch name
        id: get_branch
        env:
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          PR_BRANCH_NAME: ${{ github.event.pull_request.head.ref }}
          GITHUB_REF_SAFE: ${{ github.ref }}
        run: |
          if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
            # Use the branch from the pull request safely via environment variable
            current_branch="$PR_BRANCH_NAME"
          else
            # Remove the "refs/heads/" prefix from GITHUB_REF safely
            current_branch="${GITHUB_REF_SAFE#refs/heads/}"
          fi
 
          # Write the branch name to $GITHUB_ENV securely
          echo "branch_name=${current_branch}" >> "$GITHUB_ENV"

      - name: Fetch data storage branch
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git fetch --all
          git checkout save_historical_data && git pull || git checkout -b save_historical_data
      
      - name: Load persistent data
        run: |
          if ! git ls-tree --name-only origin/save_historical_data TSF/MemoryEfficientTestResultData.db | grep TSF/MemoryEfficientTestResultData.db; then
            touch TSF/MemoryEfficientTestResultData.db
            git add TSF/MemoryEfficientTestResultData.db
            git commit -m "Create persistent storage"
            git push origin save_historical_data
          fi
          git checkout $branch_name
          git checkout save_historical_data -- TSF/MemoryEfficientTestResultData.db

      - name: append test data
        run: |
          python3 TSF/scripts/capture_test_data_memory_sensitive.py successful
      
      - name: Checkout data storage branch
        if: github.event_name == 'schedule' || (github.event_name == 'push' && github.ref_name == 'main')
        run: |
          git stash push --include-untracked -- $(git status --porcelain | awk '{print $2}' | grep -v TSF/MemoryEfficientTestResultData.db)
          git checkout save_historical_data

      - name: Commit and Push persistent data
        if: github.event_name == 'schedule' || (github.event_name == 'push' && github.ref_name == 'main')
        run: |
          git add TSF/MemoryEfficientTestResultData.db
          git commit -m "Save test data" || echo "No test data to be saved"
          git push origin save_historical_data
      
      - name: Recover stash
        if: github.event_name == 'schedule' || (github.event_name == 'push' && github.ref_name == 'main')
        run: |
          git checkout $branch_name
          git stash apply
      
      - name: Move test report
        run: |
          mkdir test_report
          mv MemoryEfficientTestResults.db test_report/MemoryEfficientTestResults.db

      - name: Upload test report 
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: publish_data_artifact
          path: test_report/


  publish_test_data_failure:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: [ci_test_gcc, ci_infer, ci_static_analysis_ubuntu, ci_static_analysis_clang, ci_cmake_options, ci_test_coverage, ci_test_compilers_gcc_old, ci_test_compilers_gcc, ci_test_compilers_clang, ci_test_standards_gcc, ci_test_standards_clang, ci_cuda_example, ci_icpc, ci_test_documentation]
    if: failure()
    steps:
      - name: Check out code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Download all workflow artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          path: my_artifacts

      - name: Get current branch name
        id: get_branch
        env:
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          PR_BRANCH_NAME: ${{ github.event.pull_request.head.ref }}
          GITHUB_REF_SAFE: ${{ github.ref }}
        run: |
          if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
            # Use the branch from the pull request safely via environment variable
            current_branch="$PR_BRANCH_NAME"
          else
            # Remove the "refs/heads/" prefix from GITHUB_REF safely
            current_branch="${GITHUB_REF_SAFE#refs/heads/}"
          fi
 
          # Write the branch name to $GITHUB_ENV securely
          echo "branch_name=${current_branch}" >> "$GITHUB_ENV"

      - name: Fetch data storage branch
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git fetch --all
          git checkout save_historical_data && git pull || git checkout -b save_historical_data
      
      - name: Load persistent data
        run: |
          if ! git ls-tree --name-only origin/save_historical_data TSF/MemoryEfficientTestResultData.db | grep TSF/MemoryEfficientTestResultData.db; then
            touch TSF/MemoryEfficientTestResultData.db
            git add TSF/MemoryEfficientTestResultData.db
            git commit -m "Create persistent storage"
            git push origin save_historical_data
          fi
          git checkout $branch_name
          git checkout save_historical_data -- TSF/MemoryEfficientTestResultData.db

      - name: append test data
        run: |
          python3 TSF/scripts/capture_test_data_memory_sensitive.py failed
      
      - name: Checkout data storage branch
        if: github.event_name == 'schedule' || (github.event_name == 'push' && github.ref_name == 'main')
        run: |
          git stash push --include-untracked -- $(git status --porcelain | awk '{print $2}' | grep -v TSF/MemoryEfficientTestResultData.db)
          git checkout save_historical_data

      - name: Commit and Push persistent data
        if: github.event_name == 'schedule' || (github.event_name == 'push' && github.ref_name == 'main')
        run: |
          git add TSF/MemoryEfficientTestResultData.db
          git commit -m "Save test data" || echo "No test data to be saved"
          git push origin save_historical_data
      
      - name: Recover stash
        if: github.event_name == 'schedule' || (github.event_name == 'push' && github.ref_name == 'main')
        run: |
          git checkout $branch_name
          git stash apply
      
      - name: Move test report
        run: |
          mkdir test_report
          mv MemoryEfficientTestResults.db test_report/MemoryEfficientTestResults.db

      - name: Upload test report 
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: publish_data_artifact
          path: test_report/


  publish_test_data_cancellation:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: [ci_test_gcc, ci_infer, ci_static_analysis_ubuntu, ci_static_analysis_clang, ci_cmake_options, ci_test_coverage, ci_test_compilers_gcc_old, ci_test_compilers_gcc, ci_test_compilers_clang, ci_test_standards_gcc, ci_test_standards_clang, ci_cuda_example, ci_icpc, ci_test_documentation]
    if: cancelled()
    steps:
      - name: Check out code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Download all workflow artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          path: my_artifacts

      - name: Get current branch name
        id: get_branch
        env:
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          PR_BRANCH_NAME: ${{ github.event.pull_request.head.ref }}
          GITHUB_REF_SAFE: ${{ github.ref }}
        run: |
          if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
            # Use the branch from the pull request safely via environment variable
            current_branch="$PR_BRANCH_NAME"
          else
            # Remove the "refs/heads/" prefix from GITHUB_REF safely
            current_branch="${GITHUB_REF_SAFE#refs/heads/}"
          fi
 
          # Write the branch name to $GITHUB_ENV securely
          echo "branch_name=${current_branch}" >> "$GITHUB_ENV"

      - name: Fetch data storage branch
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git fetch --all
          git checkout save_historical_data && git pull || git checkout -b save_historical_data
      
      - name: Load persistent data
        run: |
          if ! git ls-tree --name-only origin/save_historical_data TSF/MemoryEfficientTestResultData.db | grep TSF/MemoryEfficientTestResultData.db; then
            touch TSF/MemoryEfficientTestResultData.db
            git add TSF/MemoryEfficientTestResultData.db
            git commit -m "Create persistent storage"
            git push origin save_historical_data
          fi
          git checkout $branch_name
          git checkout save_historical_data -- TSF/MemoryEfficientTestResultData.db

      - name: append test data
        run: |
          python3 TSF/scripts/capture_test_data_memory_sensitive.py cancelled
      
      - name: Checkout data storage branch
        if: github.event_name == 'schedule' || (github.event_name == 'push' && github.ref_name == 'main')
        run: |
          git stash push --include-untracked -- $(git status --porcelain | awk '{print $2}' | grep -v TSF/MemoryEfficientTestResultData.db)
          git checkout save_historical_data

      - name: Commit and Push persistent data
        if: github.event_name == 'schedule' || (github.event_name == 'push' && github.ref_name == 'main')
        run: |
          git add TSF/MemoryEfficientTestResultData.db
          git commit -m "Save test data" || echo "No test data to be saved"
          git push origin save_historical_data
      
      - name: Recover stash
        if: github.event_name == 'schedule' || (github.event_name == 'push' && github.ref_name == 'main')
        run: |
          git checkout $branch_name
          git stash apply
      
      - name: Move test report
        run: |
          mkdir test_report
          mv MemoryEfficientTestResults.db test_report/MemoryEfficientTestResults.db

      - name: Upload test report 
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: publish_data_artifact
          path: test_report/


  ubuntu_artifact:
    runs-on: ubuntu-latest
    needs: [publish_test_data_success, publish_test_data_failure, publish_test_data_cancellation, ci_test_gcc, ci_infer, ci_static_analysis_ubuntu, ci_static_analysis_clang, ci_cmake_options, ci_test_coverage, ci_test_compilers_gcc_old, ci_test_compilers_gcc, ci_test_compilers_clang, ci_test_standards_gcc, ci_test_standards_clang, ci_cuda_example, ci_icpc, ci_test_documentation]
    if: ${{ always() && (needs.publish_test_data_success.result == 'success' || needs.publish_test_data_failure.result == 'success' || needs.publish_test_data_cancellation.result == 'success') }}
    steps:
      - name: Download test report
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: publish_data_artifact

      - name: Generate ubuntu artifact
        run: |
          echo "Generating ubuntu artifact..."
          mkdir -p ubuntu
          if [ -f MemoryEfficientTestResults.db ]; then
            mv MemoryEfficientTestResults.db ubuntu/MemoryEfficientTestResults.db
          else
            echo "No test-results were captured."
          fi
          echo "ubuntu processed for ${{ inputs.artifact_id }}" > ubuntu/ubuntu.txt

      - name: Upload ubuntu artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ${{ inputs.artifact_id }}
          path: ubuntu/

# *******************************************************************************
# Copyright (c) 2025 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Apache License Version 2.0 which is available at
# https://www.apache.org/licenses/LICENSE-2.0
#
# SPDX-License-Identifier: Apache-2.0
# *******************************************************************************

name: Documentation

on:
  workflow_call:
    inputs:
      artifact_id:
        description: 'Unique identifier for artifacts to be loaded'
        required: true
        type: string

permissions:
  contents: read

jobs:
  run-trudag:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      pull-requests: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Load ubuntu-artifact
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: ${{ inputs.artifact_name }}
          path: artifacts/

      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: '3.11.2'

      # trudag version 2025.7.23
      - name: Install trudag and dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y graphviz
          pip install git+https://gitlab.com/CodethinkLabs/trustable/trustable@9957f12171cb898d83df5ae708fdba0a38fece2e

      - name: Get current branch name
        id: get_branch
        env:
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          PR_BRANCH_NAME: ${{ github.event.pull_request.head.ref }}
          GITHUB_REF_SAFE: ${{ github.ref }}
        run: |
          if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
            # Use the branch from the pull request safely via environment variable
            current_branch="$PR_BRANCH_NAME"
          else
            # Remove the "refs/heads/" prefix from GITHUB_REF safely
            current_branch="${GITHUB_REF_SAFE#refs/heads/}"
          fi
 
          # Write the branch name to $GITHUB_ENV securely
          echo "branch_name=${current_branch}" >> "$GITHUB_ENV"

      - name: Fetch data storage branch
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git fetch --all
          git checkout save_historical_data && git pull || git checkout -b save_historical_data
      
      - name: Load persistent data
        run: |
          if ! git ls-tree --name-only origin/save_historical_data TSF/TrustableScoring.db | grep TSF/TrustableScoring.db; then
            mkdir -p TSF
            touch TSF/TrustableScoring.db
            git add TSF/TrustableScoring.db
            git commit -m "Initialise persistent data storage"
            git push origin save_historical_data
          fi
          git checkout $branch_name
          git checkout save_historical_data -- TSF/TrustableScoring.db

      - name: Generate trudag report
        run: |
          REPO_FULL="${{ github.repository }}"
          REPO_NAME="${REPO_FULL#*/}"
          OWNER_NAME="${REPO_FULL%%/*}" 
          TSF/scripts/generate_report.sh "https://${OWNER_NAME}.github.io/${REPO_NAME}/main"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          sudo apt install gh -y

      - name: Authenticate with GitHub CLI
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Checkout data storage branch
        run: |
          git stash push --include-untracked -- $(git status --porcelain | awk '{print $2}' | grep -v TSF/TrustableScoring.db)
          git checkout save_historical_data
          git pull

      - name: Fetch open issues labelled as bug from nlohmann/json
        id: fetch_issues
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

          # Define variables
          REPO="nlohmann/json" # Target repository
          OUTPUT_FILE="TSF/misbehaviours.md"

          # Check if the target repository is reachable
          if ! gh repo view "$REPO" --json name -q .name; then
            echo "Could not reach the target repository ($REPO). Aborting workflow."
            exit 1
          fi

          # Fetch open issues from the nlohmann/json repository
          gh issue list --repo "$REPO" --state open --limit 10000 --json number,title,state,createdAt,url,labels > raw_open_issues.json

          # Fetch closed issues from the nlohmann/json repository
          gh issue list --repo "$REPO" --state closed --limit 10000 --json number,title,state,createdAt,url,labels > raw_closed_issues.json

          # Add title to the output file
          echo "# Misbehaviours Report" > $OUTPUT_FILE
          echo "" >> $OUTPUT_FILE
          echo "This report lists known misbehaviours or bugs of v3.12.0 of the nlohmann/json repository. The misbehaviours are compiled from github issues of the nlohmann/json repository, and link to each corresponding issue." >> $OUTPUT_FILE
          echo "" >> $OUTPUT_FILE

          # Add subtitle for open issues
          echo "## Open Issues" >> $OUTPUT_FILE
          echo "" >> $OUTPUT_FILE

          # Filter raw open issues for labels containing "bug" and convert to output .md file
          jq -r '
              map(select(.labels[]?.name | test("bug"; "i"))) |
              map("### [#\(.number)](\(.url))\n- **Title:** \(.title)\n- **State:** \(.state)\n- **Created At:** \(.createdAt)\n") |
              .[]
            ' raw_open_issues.json >> $OUTPUT_FILE

          # Add subtitle for closed issues
          echo "" >> $OUTPUT_FILE
          echo "## Closed Issues (since v3.12.0)" >> $OUTPUT_FILE
          echo "" >> $OUTPUT_FILE

          # Filter raw closed issues for labels containing "bug", created after release date of nlohmann/json version in use, and convert to output .md file
          jq -r '
              map(select(.labels[]?.name | test("bug"; "i"))) |
              map(select(.createdAt > "2025-04-11T00:00:00Z")) |  # Adjust date as needed, 2025-04-11 corresponds to release v3.12.0 of nlohmann/json
              map("### [#\(.number)](\(.url))\n- **Title:** \(.title)\n- **State:** \(.state)\n- **Created At:** \(.createdAt)\n") |
              .[]
            ' raw_closed_issues.json >> $OUTPUT_FILE

          mkdir -p TSF

          # Push misbehaviours file to save_historical_data branch
          git add TSF/misbehaviours.md
          git commit -m "Updated issues list" || echo "No changes to commit"
          git push origin save_historical_data

      - name: Store persistent data
        run: |
          git add TSF/TrustableScoring.db
          git commit -m "Append data storage" || echo "Historical data already up to date."
          git push origin save_historical_data

      - name: Recover stash
        run: |
          git checkout $branch_name
          git stash apply

      - name: Upload trudag artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: trudag-report-${{ github.sha }}
          path: TSF/docs/generated/
          if-no-files-found: error
          
  build-docs:
    needs: run-trudag
    # the eclipse-score/cicd-workflow docs.yml is adjusted to download the trudag report artifact before building the documentation
    uses: ./.github/workflows/docs.yml
    permissions:
      contents: write
      pages: write
      pull-requests: write
      id-token: write

    with:
      # the bazel-target depends on your repo specific docs_targets configuration (e.g. "suffix")Add commentMore actions
      bazel-target: "//:docs -- --github_user=${{ github.repository_owner }} --github_repo=${{ github.event.repository.name }}"
      retention-days: 3
